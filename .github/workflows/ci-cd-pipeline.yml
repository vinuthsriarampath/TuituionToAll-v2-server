name: CI/CD pipeline

on:
  push:
    branches:
      - chore/CI-CD-v2
    tags:
      - 'v*.*.*'

env:
  JAVA_VERSION: 22
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Set repository variables
        run: |
          echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_NAME_SHORT=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract Project Version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Get current pom version
        id: current-version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "CUR_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get previous pom version
        id: previous-version
        run: |
          PREV_VERSION=$(git show HEAD^:pom.xml | sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' | head -n 1)
          echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: version-check
        run: |
          if [ "${{ steps.current-version.outputs.CUR_VERSION }}" != "${{ steps.previous-version.outputs.PREV_VERSION }}" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Find JAR file
        id: find_jar
        run: |
          JAR_PATH=$(find target -name "*.jar" | grep -v "original")
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ steps.version-check.outputs.VERSION_CHANGED }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.TAG_VERSION }}
          name: Release ${{ steps.get_version.outputs.PROJECT_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ steps.find_jar.outputs.JAR_PATH }}

      #      Docker Steps

      - name: Set up Docker Buildx
        if: ${{ steps.version-check.outputs.VERSION_CHANGED }}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ steps.version-check.outputs.VERSION_CHANGED }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        if: ${{ steps.version-check.outputs.VERSION_CHANGED }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME_SHORT }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.PROJECT_VERSION }}
            type=sha

      - name: Build and push Docker image
        if: ${{ steps.version-check.outputs.VERSION_CHANGED }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME_SHORT }}:${{ steps.get_version.outputs.PROJECT_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME_SHORT }}:latest
